```{r, include=FALSE}
#read in data
OF <- read.csv("~/Downloads/SMT Challenge/smt_data_challenge_2023/outfield_plays.csv")

OF$player_position <- as.factor(OF$player_position)
OF <- OF[OF$ball_position_y > 0,]
OF <- OF[OF$hangtime > 1000,]
OF <- OF[OF$ball_position_y < 400,]

for (i in 1:nrow(OF)){
  if (OF[i,]$out == "1"){
    OF[i,]$out <- "Catch"
  }
  else{
    OF[i,]$out <- "Hit"
  }
}
OF$out <- as.factor(OF$out)
```

```{r, include=FALSE}
#build model
library(randomForest)

OF_Forest <- randomForest(out ~ ball_position_x + ball_position_y + hangtime + ball_position_y*hangtime + ball_position_x*hangtime, data=OF, ntree=1000)
```

```{r, include=FALSE}
#forest accuracy
accuracy2 <- (OF_Forest$confusion[1,1] + OF_Forest$confusion[2,2])/nrow(OF)

#out accuracy
out_accuracy2 <- 1-OF_Forest$confusion[1,3]
#hit accuracy
hit_accuracy2 <- 1-OF_Forest$confusion[2,3]
```

```{r, echo=FALSE}
#check which variables are important
varImpPlot(OF_Forest, sort=T, n.var= 3, main= "Variables", pch=16, color="black")
```

```{r, echo=FALSE, message=FALSE}
library(ggplot2)

#hangtime vs distance plot
ggplot(OF, aes(x=hangtime, y=sqrt((ball_position_y)**2 + (ball_position_x)**2)))+
  geom_point(color="purple")+
  labs(x="Hang Time", y="Distance of Hit")+
  ggtitle("Hang Time vs. Distance of Hit")+
  geom_smooth(color="black")
```

```{r, include=FALSE}
#predictions with forest
probs_forest <- predict(OF_Forest, OF, "prob")
probs_forest <- probs_forest[,-2]

pred_forest <- predict(OF_Forest, OF)
```

```{r, echo=FALSE, message=FALSE}
#x vs out prob
ggplot(OF, aes(x=ball_position_x, y=probs_forest))+
  geom_point(color="red")+
  labs(x="X-Coordinate", y="Catch Probability")+
  ggtitle("X-Coord vs. Catch Probability")+
  geom_smooth(color="black")
```

```{r, echo=FALSE, message=FALSE}
#y vs out prob
ggplot(OF, aes(x=ball_position_y, y=probs_forest))+
  geom_point(color="green")+
  labs(x="Y-Coordinate", y="Catch Probability")+
  ggtitle("Y-Coord vs. Catch Probability")+
  geom_smooth(color="black")
```

```{r, echo=FALSE, message=FALSE}
#hangtime vs out prob
ggplot(OF, aes(x=hangtime, y=probs_forest))+
  geom_point(color="blue")+
  labs(x="Hang Time", y="Catch Probability")+
  ggtitle("Hang Time vs. Catch Probability")+
  geom_smooth(color="black")

```

```{r, echo=FALSE}
#spraychart plots
library(GeomMLBStadiums)

OFS <- cbind(OF,probs_forest, pred_forest)

ggplot(OFS, aes(x=ball_position_x, y=ball_position_y,color=pred_forest))+
  geom_spraychart(stadium_transform_coords = TRUE)+
  ggtitle("Catch Prediction")+
  labs(x="X-Coord", y="Y-Coord")
```

```{r, echo=FALSE}
ggplot(OFS, aes(x=ball_position_x, y=ball_position_y, color=probs_forest))+
  geom_spraychart(stadium_transform_coords = TRUE)+
  ggtitle("Catch Probability")+
  labs(x="X-Coord", y="Y-Coord")
```

```{r, echo=FALSE}
ggplot(OFS, aes(x=ball_position_x,
                y=ball_position_y,
                color=hangtime))+
  geom_spraychart(stadium_transform_coords = TRUE)+
  ggtitle("Catch Predictions with Hang Time")+
  labs(x="X-Coord", y="Y-Coord")+
  facet_wrap(~pred_forest)
```
